:λ> "abc"
"abc"
λ> ['a','b','c']
"abc"
λ> length "abc"
3
λ> head "abc"
'a'
λ> map (\c -> 'x') "abc"
"xxx"
λ> foldr (\c res -> if c == "b" then 'x':res else c:res) [] "abc"

<interactive>:61:48-52: error:
    • Couldn't match type ‘[Char]’ with ‘Char’
      Expected type: [Char]
        Actual type: [[Char]]
    • In the expression: c : res
      In the expression: if c == "b" then 'x' : res else c : res
      In the first argument of ‘foldr’, namely
        ‘(\ c res -> if c == "b" then 'x' : res else c : res)’

<interactive>:61:50-52: error:
    • Couldn't match type ‘Char’ with ‘[Char]’
      Expected type: [[Char]]
        Actual type: [Char]
    • In the second argument of ‘(:)’, namely ‘res’
      In the expression: c : res
      In the expression: if c == "b" then 'x' : res else c : res

<interactive>:61:58-62: error:
    • Couldn't match type ‘Char’ with ‘[Char]’
      Expected type: [[Char]]
        Actual type: [Char]
    • In the third argument of ‘foldr’, namely ‘"abc"’
      In the expression:
        foldr (\ c res -> if c == "b" then 'x' : res else c : res) [] "abc"
      In an equation for ‘it’:
          it
            = foldr
                (\ c res -> if c == "b" then 'x' : res else c : res) [] "abc"
λ> foldr (\c res -> if c == 'b' then 'x':res else c:res) [] "abc"
"axc"
λ> putChar nineChar

<interactive>:63:9-16: error:
    Variable not in scope: nineChar :: Char
λ> :l Functional.Lecture.InputOut

<no location info>: error:
    module ‘Functional.Lecture.InputOut’ cannot be found locally
Failed, modules loaded: none.
λ> :l Functional.Lecture.InputOut.hs

<no location info>: error:
    can't find file: Functional.Lecture.InputOut.hs
Failed, modules loaded: none.
λ> :l Functional.Lecture.InputOutput.hs

<no location info>: error:
    can't find file: Functional.Lecture.InputOutput.hs
Failed, modules loaded: none.
λ> :l Functional.Lecture.InputOutput
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> :l Functional/Lecture/InputOutput.hs
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> :l Functional.Lecture.InputOutput
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> putChar nineChar
9λ> putStr abcString
abcλ> putStrLn abcString
abc
λ> abcString
"abc"
λ> 1 + 2
3
λ> getChar
12
'1'
2
λ> getChar
1
'1'
λ> ()
()
λ> getLine
q4775
"q4775"
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:64:28-36: error:
    • Variable not in scope: putString :: String -> IO a0
    • Perhaps you meant ‘putStrLn’ (imported from Prelude)
   |
64 | putBothStrings str1 str2 = putString str1 >> putReversedString str1
   |                            ^^^^^^^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:64:1-61: error:
    • Couldn't match expected type ‘IO ()’
                  with actual type ‘p0 -> IO ()’
    • The equation(s) for ‘putBothStrings’ have two arguments,
      but its type ‘String -> IO ()’ has only one
   |
64 | putBothStrings str1 str2 = putStr str1 >> putReversedStr str1
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> putReversedStr "Hello"
olleHλ> putBothString "Hello"

<interactive>:86:1-13: error:
    • Variable not in scope: putBothString :: [Char] -> t
    • Perhaps you meant ‘putBothStrings’ (line 64)
λ> putBothStrings "Hello"
HelloolleHλ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> reverse [1,2,3,5]
[5,3,2,1]
λ> reverse "abc"
"cba"
λ> :r
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> putBothStrings "Hello"
Hello olleHλ> [1,2,3] ++ [3,4,5]
[1,2,3,3,4,5]
λ> "abc" ++ "def"
"abcdef"
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:71:27-29: error:
    Variable not in scope: str :: [Char]
   |
71 | putBothStrings2 = putStr (str ++ " " ++ reverse str)
   |                           ^^^

Functional/Lecture/InputOutput.hs:71:49-51: error:
    Variable not in scope: str :: [Char]
   |
71 | putBothStrings2 = putStr (str ++ " " ++ reverse str)
   |                                                 ^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> putBothStrings2 "Hello"
Hello olleHλ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:74:34-61: error:
    • Couldn't match type ‘[Char]’ with ‘()’
      Expected type: IO ()
        Actual type: IO String
    • In the expression: putStrLn question >> getLine
      In an equation for ‘getStringWithQuestion’:
          getStringWithQuestion question = putStrLn question >> getLine
   |
74 | getStringWithQuestion question = putStrLn question >> getLine
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getStringWihtQuestion "Write a sentence, please!"

<interactive>:100:1-21: error:
    • Variable not in scope: getStringWihtQuestion :: [Char] -> t
    • Perhaps you meant ‘getStringWithQuestion’ (line 74)
λ> getStringWihQuestion "Write a sentence, please!"

<interactive>:101:1-20: error:
    • Variable not in scope: getStringWihQuestion :: [Char] -> t
    • Perhaps you meant ‘getStringWithQuestion’ (line 74)
λ> getStringWithQuestion "Write a sentence, please!"
Write a sentence, please!
Here is my sentence!
"Here is my sentence!"
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:74:34-86: error:
    • Couldn't match type ‘()’ with ‘[Char]’
      Expected type: IO String
        Actual type: IO ()
    • In the expression:
        putStrLn question >> getLine >> putStrLn "Thank You!"
      In an equation for ‘getStringWithQuestion’:
          getStringWithQuestion question
            = putStrLn question >> getLine >> putStrLn "Thank You!"
   |
74 | getStringWithQuestion question = putStrLn question >> getLine >> putStrLn "Thank You!"
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getStringWithQuestion "Write a sentence, please!"
Write a sentence, please!
Here is my sentence.
"Here is my sentence."
λ> getStringWithQuestionPolite "Write a sentence, please!"
Write a sentence, please!
Again, my sentence.
Thank You!
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> putReversedStr

<interactive>:108:1-14: error:
    • No instance for (Show (String -> IO ()))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
λ> putReversedStr "Hello"
Reversed String: olleHλ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getReversed 
Please type a word
Hello
Reversed String: olleHλ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getReversed 
Please type a word
Hello
Reversed String: 
olleHλ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getReversed 
Please type a word
Hello
Reversed String: olleH
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getCombined
Hello
World
Combined: HelloWorld
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> isDigit 'a'
False
λ> isDigit '1'
True
λ> isDigit '?'
False
λ> getDigit
y
No
λ> getDigit
1
Yes
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getDigit
y
This input is not a digit, please try again
This input is not a digit, please try again
yes
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
1
42
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:116:30-31: error:
    • No instance for (Num (IO Int)) arising from the literal ‘42’
    • In the expression: 42
      In the expression:
        if isDigit c then
            42
        else
            putStrLn "This input is not a digit, please try again" >> getDigit
      In the second argument of ‘(>>=)’, namely
        ‘\ c
           -> if isDigit c then
                  42
              else
                  putStrLn "This input is not a digit, please try again" >> getDigit’
    |
116 |            if isDigit c then 42
    |                              ^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:(115,12)-(117,95): error:
    • Couldn't match type ‘Char’ with ‘Int’
      Expected type: IO Int
        Actual type: IO Char
    • In the expression:
        getChar
          >>=
            \ c
              -> if isDigit c then
                     pure c
                 else
                     putStrLn "This input is not a digit, please try again" >> getDigit
      In an equation for ‘getDigit’:
          getDigit
            = getChar
                >>=
                  \ c
                    -> if isDigit c then
                           pure c
                       else
                           putStrLn "This input is not a digit, please try again" >> getDigit
    |
115 | getDigit = getChar >>= \c ->
    |            ^^^^^^^^^^^^^^^^^...

Functional/Lecture/InputOutput.hs:117:30-95: error:
    • Couldn't match type ‘Int’ with ‘Char’
      Expected type: IO Char
        Actual type: IO Int
    • In the expression:
        putStrLn "This input is not a digit, please try again" >> getDigit
      In the expression:
        if isDigit c then
            pure c
        else
            putStrLn "This input is not a digit, please try again" >> getDigit
      In the second argument of ‘(>>=)’, namely
        ‘\ c
           -> if isDigit c then
                  pure c
              else
                  putStrLn "This input is not a digit, please try again" >> getDigit’
    |
117 |                         else putStrLn "This input is not a digit, please try again" >> getDigit
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getDigit
y
This input is not a digit, please try again
This input is not a digit, please try again
8
8
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getDigit
1
1
λ> getDigit
yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
gguh
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
This input is not a digit, please try again
6
6
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:142:19-90: error:
    • Couldn't match expected type ‘Int’
                  with actual type ‘t0 ([(Char, b0)], [(Char, b0)]) -> [(Char, b0)]’
    • Probable cause: ‘foldr’ is applied to too few arguments
      In the expression:
        foldr
          (\ (d, tens) acc -> d * tens + acc) (zip (reverse str) powerOfTens)
      In an equation for ‘numberToInt’:
          numberToInt str
            = foldr
                (\ (d, tens) acc -> d * tens + acc) (zip (reverse str) powerOfTens)
            where
                powerOfTens = help 0
                help n = 10 ^ n : help (n + 1)
    • Relevant bindings include
        powerOfTens :: [b0]
          (bound at Functional/Lecture/InputOutput.hs:144:5)
    |
142 | numberToInt str = foldr (\(d, tens) acc -> d * tens + acc) (zip (reverse str) powerOfTens)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:142:19-92: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Char’
    • In the expression:
        foldr
          (\ (d, tens) acc -> d * tens + acc)
          0
          (zip (reverse str) powerOfTens)
      In an equation for ‘numberToInt’:
          numberToInt str
            = foldr
                (\ (d, tens) acc -> d * tens + acc)
                0
                (zip (reverse str) powerOfTens)
            where
                powerOfTens = help 0
                help n = 10 ^ n : help (n + 1)
    |
142 | numberToInt str = foldr (\(d, tens) acc -> d * tens + acc) 0 (zip (reverse str) powerOfTens)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> numberToInt "123"
123
λ> numberToInt "1234"
1234
λ> numberToInt "5234"
5234
λ> numberToInt "5234" + 5
5239
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getNumber
sfduhkg
This input is not a digit, please try again
254545
254545
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> getNumber >> getNumber
1234
1242
1242
λ> getNumber >>= (\n1 -> getNumber >>= (\n2 -> putStrLn (n1 + n2)))

<interactive>:150:55-61: error:
    • Couldn't match type ‘Int’ with ‘[Char]’
      Expected type: String
        Actual type: Int
    • In the first argument of ‘putStrLn’, namely ‘(n1 + n2)’
      In the expression: putStrLn (n1 + n2)
      In the second argument of ‘(>>=)’, namely
        ‘(\ n2 -> putStrLn (n1 + n2))’
λ> getNumber >>= (\n1 -> getNumber >>= (\n2 -> putStrLn (show (n1 + n2))))
1423
12g
This input is not a number, please try again
12
1435
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> powerOfTens
[1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000,10000000000,100000000000,1000000000000,10000000000000,100000000000000,1000000000000000,10000000000000000,100000000000000000,1000000000000000000,-8446744073709551616,7766279631452241920,3875820019684212736,1864712049423024128,200376420520689664,2003764205206896640,1590897978359414784,-2537764290115403776,-6930898827444486144,4477988020393345024,7886392056514347008,5076944270305263616,-4570789518076018688,-8814407033341083648,4089650035136921600,4003012203950112768,3136633892082024448,-5527149226598858752,68739955140067328,687399551400673280,6873995514006732800,-5047021154770878464,4870020673419870208,-6640025486929952768,7386721425538678784,80237960548581376,802379605485813760,8023796054858137600,6450984253743169536,9169610316303040512,-537617205517352960,-5376172055173529600,1578511669393358848,-2661627379775963136,-8169529724050079744,-7908320945662590976,-5296233161787703296,2377900603251621888,5332261958806667264,-2017612633061982208,-1729382256910270464,1152921504606846976,-6917529027641081856,4611686018427387904,-9223372036854775808,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,Interrupted.
λ> getPowerOfTens
10
[1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000]
λ> :t writeFile
writeFile :: FilePath -> String -> IO ()
λ> :t readFile
readFile :: FilePath -> IO String
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> lilProgram
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> lilProgram2
λ> read "123"
*** Exception: Prelude.read: no parse
λ> read "123" :: Int
123
λ> read "123" + 12
135
λ> read "123y" + 12
*** Exception: Prelude.read: no parse
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:161:83-98: error:
    • Couldn't match expected type ‘String -> a0’
                  with actual type ‘[a1]’
    • The function ‘reversedList’ is applied to one argument,
      but its type ‘[a1]’ has none
      In the first argument of ‘show’, namely ‘(reversedList str)’
      In the second argument of ‘writeFile’, namely
        ‘(show (reversedList str))’
    • Relevant bindings include
        reversedList :: [a1]
          (bound at Functional/Lecture/InputOutput.hs:162:9)
    |
161 | lilProgram2 = readFile "Tens.txt" >>= (\str -> writeFile "TensReverse.txt" (show (reversedList str)))
    |                                                                                   ^^^^^^^^^^^^^^^^

Functional/Lecture/InputOutput.hs:162:38-40: error:
    Variable not in scope: str :: String
    |
162 |   where reversedList = reverse (read str)
    |                                      ^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )

Functional/Lecture/InputOutput.hs:161:77-99: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘show’
      prevents the constraint ‘(Show a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      These potential instances exist:
        instance (Show a, Show b) => Show (Either a b)
          -- Defined in ‘Data.Either’
        instance Show Ordering -- Defined in ‘GHC.Show’
        instance Show Integer -- Defined in ‘GHC.Show’
        ...plus 23 others
        ...plus 60 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the second argument of ‘writeFile’, namely
        ‘(show (reversedList str))’
      In the expression:
        writeFile "TensReverse.txt" (show (reversedList str))
      In the second argument of ‘(>>=)’, namely
        ‘(\ str -> writeFile "TensReverse.txt" (show (reversedList str)))’
    |
161 | lilProgram2 = readFile "Tens.txt" >>= (\str -> writeFile "TensReverse.txt" (show (reversedList str)))
    |                                                                             ^^^^^^^^^^^^^^^^^^^^^^^

Functional/Lecture/InputOutput.hs:161:83-98: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘reversedList’
      prevents the constraint ‘(Read a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      These potential instances exist:
        instance (Read a, Read b) => Read (Either a b)
          -- Defined in ‘Data.Either’
        instance Read Ordering -- Defined in ‘GHC.Read’
        instance Read Integer -- Defined in ‘GHC.Read’
        ...plus 23 others
        ...plus 38 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the first argument of ‘show’, namely ‘(reversedList str)’
      In the second argument of ‘writeFile’, namely
        ‘(show (reversedList str))’
      In the expression:
        writeFile "TensReverse.txt" (show (reversedList str))
    |
161 | lilProgram2 = readFile "Tens.txt" >>= (\str -> writeFile "TensReverse.txt" (show (reversedList str)))
    |                                                                                   ^^^^^^^^^^^^^^^^
Failed, modules loaded: none.
λ> :r
[1 of 1] Compiling Functional.Lecture.InputOutput ( Functional/Lecture/InputOutput.hs, interpreted )
Ok, modules loaded: Functional.Lecture.InputOutput.
λ> lilProgram2
λ> 
